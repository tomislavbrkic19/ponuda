@model Ponuda.Models.Stavke

@{
    ViewBag.Title = "Udređivanje Stavke";

}


<div class="modal-dialog">
    <div class="modal-content">
        <a href="#" class="close" data-dismiss="modal">&times;</a>
        <div class="modal-header">

            <h4 id="ModalTitle"></h4>
        </div>
        <div class="modal-body">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>Edit Stavke</h4>

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @*@Html.HiddenFor(model => model.PonudaID)*@

                @Html.Hidden("PonudaId")
                @Html.Hidden("StavkaId")
                @Html.Hidden("ArtikalId")
                @*<div class="form-group">
            @Html.LabelFor(model => model.StavkaId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StavkaId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StavkaId, "", new { @class = "text-danger" })
            </div>
        </div>*@
                <div class="form-group">
                    <div class="col-md-3">
                        <label class="control-label col-md-2">Odabrani artikal:</label>
                    </div>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Artikli.NazivArtikla, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        <label class="control-label col-md-2">Popis artikala:</label>
                    </div>
                    <div class="col-md-9">
                        <select class="form-control" id="Artikli" name="Artikli" size="5"></select>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Artikli.JedCijenaArtikla, htmlAttributes: new { @class = "control-label col-md-4" })

                    </div>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Artikli.JedCijenaArtikla, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                        @Html.ValidationMessageFor(model => model.Artikli.JedCijenaArtikla, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.Kolicina, htmlAttributes: new { @class = "control-label col-md-4" })
                    </div>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.Kolicina, new { htmlAttributes = new { @class = "form-control", min = 1, max = 9999999, pattern = @"^([a-zA-Z .&'-]+)$" } })
                        @Html.ValidationMessageFor(model => model.Kolicina, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.LabelFor(model => model.UkupnaCijenaStavke, htmlAttributes: new { @class = "control-label col-md-4" })
                    </div>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.UkupnaCijenaStavke, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.UkupnaCijenaStavke, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" id="btnspremi" class="btn btn-default" />
                    </div>
                </div>
            </div>
            }

            @*<div>
                    @Html.ActionLink("Back to List", "Index")
                </div>*@

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
            }

        </div>

    </div>

</div>


<script type="text/javascript">

    var pageSize = 20;
    var pageIndex = 0;

    var selectObj = $("#Artikli");
    var singleoptionheight = selectObj.find("option").height();
    var selectboxheight = selectObj.height();
    var numOfOptionBeforeToLoadNextSet = 2;
    var lastScrollTop = 0;
    var currentPageNo = 1;
    var isAppending = false;
    var currentScroll = 0;

    var JsonArtikli;
     s= '<option ></option>';
    $(document).ready(function () {
        GetData();
        $("#Kolicina").bind("propertychange change click keyup input paste", function (event) {
            if ($("#Kolicina").val().length == 0 || $("#Kolicina").val() == 0) {
                console.log('prazno, nula');
                $("#Kolicina").css("background", "coral");
                $("#btnspremi").attr("disabled", "disabled");
            } else {
                $("#btnspremi").removeAttr('disabled');
                $("#Kolicina").css("background", "#00FF00");
                Calculate();
            }
            
        });

        $("#Artikli").scroll(function (event) {
            console.log('Skorlam');
                var st = $(selectObj).scrollTop();
                var totalheight = selectObj.find("option").length * singleoptionheight;
                if (st > lastScrollTop) {
                    // downscroll code
                    currentScroll = st + selectboxheight;
                    if ((currentScroll + (numOfOptionBeforeToLoadNextSet * singleoptionheight)) >= totalheight) {
                        currentPageNo++;
                        
                        s += '<option value="' + @Html.Raw(Json.Encode(Model.ArtikalId)) + '">' + @Html.Raw(Json.Encode(Model.Artikli.NazivArtikla)) + '</option>';
                        GetData(0);
                    }
                } else {
                    // upscroll code
                }
                lastScrollTop = st;
            });

        $("#Artikli").on('change', function () {
          // find artikal i kalkulacija
            //console.log('pero');
            SetArtikal($(this).find("option:selected").text());
            GetJedCijena(this.value);
            Calculate();

        });

        $("#Kolicina").on('change', function () {
            // find artikal i kalkulacija
            //console.log('pero');
            GetJedCijena($("#Artikli").val());
            Calculate();

        });


    });


    function GetData(up) {

        var id = $("#ArtikalId").val();


        $.ajax({
            type: 'GET',
            url: '/Ponude/GetArtikls',
            data: { "id":id,"pageindex": pageIndex, "pagesize": pageSize },
            dataType: 'json',
            success: function (data) {
                if (data != null) {
                    JsonArtikli = data;
                    for (var i = 0; i < data.length; i++) {
                        s += '<option value="' + data[i].ArtikalId + '">' + data[i].NazivArtikla + '</option>';
                    }
                    $("#Artikli").html(s);
                    pageIndex++;
                }
            },
            beforeSend: function () {
                //$("#progress").show();
            },
            complete: function () {
                //$("#progress").hide();
            },
            error: function () {
                alert("Error while retrieving data!");
            }
        });
    };
    function SetArtikal(x) {
        $("#Artikli_NazivArtikla").val(x);
   };

    function GetJedCijena(id) {
        $.ajax({
            url: "/Ponude/GetArtikalById/" + id,
            method: "GET",
            async: false,
            data: { id: id },
            success: function (data) {
                
                $("#Artikli_JedCijenaArtikla").val(roundNumber(data[0].JedCijenaArtikla));
                $("#ArtikalId").val(data[0].ArtikalId);
                $("#PonudaId").val(data[0].PonudaId);
            }
        });
    };
    function Calculate() {
        var jedinicnaCijenaArtikla = $("#Artikli_JedCijenaArtikla").val();
       // console.log('jedinicnaCijenaArtikla:' + jedinicnaCijenaArtikla);
        var kolicinaArtikala = $("#Kolicina").val();
        console.log('kolicinaArtikala:' + kolicinaArtikala);

        var Ukupno = jedinicnaCijenaArtikla * kolicinaArtikala;
       // console.log('Ukupno:' + roundNumber(Ukupno, 2));
       // console.log(roundNumber(Ukupno, 2));
        $("#UkupnaCijenaStavke").val(roundNumber(Ukupno, 2));

    };
    function CalculateFirst() {
        
        console.log('inicijalni izračun');
        var jedinicnaCijenaArtikla = $("#Artikli_NazivArtikla").val();
        var kolicinaArtikala = $("#Kolicina").val();

        var Ukupno = jedinicnaCijenaArtikla * kolicinaArtikala;
        console.log(roundNumber(Ukupno, 2));
        $("#UkupnaCijenaStavke").val(roundNumber(Ukupno,2));

    };
    function roundNumber(num) {
        num = Number(num).toFixed(2);  
            return num;
     
    }


</script>
